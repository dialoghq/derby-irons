// Generated by CoffeeScript 1.6.3
(function() {
  var config, schema, valid;

  valid = require('./valid');

  config = {
    ns: 'derby-irons',
    filename: __filename
  };

  schema = {
    username: 'email',
    password: 'password'
  };

  module.exports = function(app, options) {
    app.fn('irons.focus', function(e, el) {
      if (el.id == null) {
        return false;
      }
      return app.model.set("_page.irons." + el.id + ".focused", true);
    });
    app.fn('irons.blur', function(e, el) {
      if (el.id == null) {
        return false;
      }
      return app.model.del("_page.irons." + el.id + ".focused");
    });
    app.fn('irons.reveal', function(e, el) {
      var path;
      if (el.id == null) {
        return false;
      }
      path = "_page.irons." + el.id + ".revealed";
      if (el.checked === true) {
        return app.model.set(path, true);
      } else {
        return app.model.del(path);
      }
    });
    app.fn('irons.submit', function(e, el) {
      var model, xhr, _ref;
      model = app.model;
      if ((model != null ? (_ref = model.at(el)) != null ? _ref.path() : void 0 : void 0) !== '_page.irons') {
        return false;
      }
      if (!valid(model.at(el), schema)) {
        if (model.toast != null) {
          model.toast('error', 'Please fix the errors and try again.');
        }
        return false;
      }
      if ((xhr = model.get('_page.irons.xhr'))) {
        xhr.abort();
        model.del('_page.irons.xhr');
        if (model.toast != null) {
          return model.toast('warning', 'Action cancelled.');
        }
      } else {
        xhr = new XMLHttpRequest();
        model.set('_page.irons.xhr', xhr);
        xhr.open(el.method, el.action, true);
        xhr.onload = function(e) {
          model.del('_page.irons.xhr');
          if (model.toast != null) {
            return model.toast('success', 'Action completed!');
          }
        };
        xhr.ontimeout = function(e) {
          model.del('_page.irons.xhr');
          if (model.toast != null) {
            return model.toast('error', 'Action timed out.');
          }
        };
        return xhr.send(new FormData(el));
      }
    });
    return app.createLibrary(config, options);
  };

}).call(this);
