// Generated by CoffeeScript 1.6.3
(function() {
  var Lazy, credential, pushOnce;

  Lazy = require('lazy.js');

  credential = require('credential');

  pushOnce = function(doc, field, val) {
    if (!(((doc != null ? doc.get : void 0) != null) && Lazy(doc.get(field)).any(function(v) {
      return v === val;
    }))) {
      return doc.push(field, val);
    }
  };

  module.exports = function(options) {
    var ironsModel;
    return ironsModel = function(req, res, next) {
      var checkPassword, fetchSession, fetchUser, fetchUserByEmail, getSession, getUser, model, newUser, registerLocal, sessionAttach, setPassword, _ref;
      if (!((req.getModel != null) && typeof req.getModel === typeof Function)) {
        throw new Error('use racer.modelMiddleware() before ironsModel()');
      }
      if (((_ref = req.session) != null ? _ref.id : void 0) == null) {
        throw new Error('use publishId() before model()');
      }
      model = req.getModel();
      req.irons = {
        getSession: getSession = function() {
          return model.at('irons_sessions.' + req.session.id);
        },
        fetchSession: fetchSession = function(done) {
          var session;
          session = getSession();
          return model.fetch(session, function(err) {
            done(err, session);
            return model.unfetch(session);
          });
        },
        getUser: getUser = function(id) {
          return model.at("irons_users." + id);
        },
        newUser: newUser = function() {
          var id;
          id = model.id();
          return model.add('irons_users', {
            id: id,
            sessions: [req.session.id],
            emails: []
          });
        },
        fetchUser: fetchUser = function(id, done) {
          var user;
          user = getUser(id || newUser());
          return model.fetch(user, function(err) {
            done(err, user);
            return model.unfetch(user);
          });
        },
        fetchUserByEmail: fetchUserByEmail = function(email, done) {
          var users;
          users = model.query('irons_users', {
            emails: email.toLowerCase(),
            $limit: 1
          });
          return model.fetch(users, function(err) {
            var id, _ref1, _ref2;
            id = users != null ? (_ref1 = users.fetchIds) != null ? (_ref2 = _ref1[0]) != null ? _ref2[0] : void 0 : void 0 : void 0;
            if (id != null) {
              fetchUser(id, function(err, user) {
                return done(err, user);
              });
            } else {
              done();
            }
            return model.unfetch(users);
          });
        },
        setPassword: setPassword = function(user, password, done) {
          return credential.hash(password, function(err, hash) {
            if (err) {
              return done(err);
            }
            user.set('password', hash);
            return done(null, user);
          });
        },
        checkPassword: checkPassword = function(user, password, done) {
          if (!((user != null ? user.password : void 0) || (user != null ? user.get('password') : void 0))) {
            return done(new Error('No password set for this user.'));
          }
          return credential.verify(user.password || user.get('password'), password, function(err, isValid) {
            return done(err, isValid);
          });
        },
        sessionAttach: sessionAttach = function(user) {
          return pushOnce(user, 'sessions', req.session.id);
        },
        registerLocal: registerLocal = function(email, password, done) {
          return fetchUser(null, function(err, user) {
            if (err) {
              return done(err);
            }
            sessionAttach(user);
            pushOnce(user, 'emails', email);
            return setPassword(user, password, function(err, user) {
              return done(err, user);
            });
          });
        }
      };
      return next();
    };
  };

}).call(this);
