// Generated by CoffeeScript 1.6.3
(function() {
  var credential;

  credential = require('credential');

  module.exports = function(options) {
    var ironsModel;
    return ironsModel = function(req, res, next) {
      var model, _ref;
      if (!((req.getModel != null) && typeof req.getModel === typeof Function)) {
        throw new Error('use racer.modelMiddleware() before ironsModel()');
      }
      if (((_ref = req.session) != null ? _ref.id : void 0) == null) {
        throw new Error('use publishId() before model()');
      }
      model = req.getModel();
      req.irons = {
        getSession: function() {
          return model.at('irons_sessions.' + req.session.id);
        },
        fetchSession: function(done) {
          var session;
          session = req.irons.getSession();
          return model.fetch(session, function(err) {
            done(err, session);
            return model.unfetch(session);
          });
        },
        getUser: function(id) {
          return model.at("irons_users." + id);
        },
        fetchUser: function(id, done) {
          var user;
          id || (id = model.id());
          user = req.irons.getUser(id);
          return model.fetch(user, function(err) {
            if (err == null) {
              user.setNull('id', id);
              user.setNull('sessions', []);
              user.setNull('emails', []);
            }
            done(err, user);
            return model.unfetch(user);
          });
        },
        fetchUserByEmail: function(email, done) {
          var users;
          users = model.query('irons_users', {
            emails: email.toLowerCase(),
            $limit: 1
          });
          return model.fetch(users, function(err) {
            var id, _ref1, _ref2;
            id = users != null ? (_ref1 = users.fetchIds) != null ? (_ref2 = _ref1[0]) != null ? _ref2[0] : void 0 : void 0 : void 0;
            if (id != null) {
              req.irons.fetchUser(id, function(err, user) {
                return done(err, user);
              });
            } else {
              done();
            }
            return model.unfetch(users);
          });
        },
        setPassword: function(user, password, done) {
          return credential.hash(password, function(err, hash) {
            if (err) {
              return done(err);
            }
            user.set('password', hash);
            return done(null, user);
          });
        },
        checkPassword: function(user, password, done) {
          if (!((user != null ? user.password : void 0) || (user != null ? user.get('password') : void 0))) {
            return done(new Error('No password set for this user.'));
          }
          return credential.verify(user.password || user.get('password'), password, function(err, isValid) {
            return done(err, isValid);
          });
        },
        registerLocal: function(email, password, done) {
          return req.irons.fetchUser(null, function(err, user) {
            if (err) {
              return done(err);
            }
            user.push('sessions', req.session.id);
            user.push('emails', email.toLowerCase());
            return req.irons.setPassword(user, password, function(err, user) {
              return done(err, user);
            });
          });
        }
      };
      return next();
    };
  };

}).call(this);
