// Generated by CoffeeScript 1.6.3
(function() {
  var Lazy, credential, ensureInput, fetchForm, parseInput, registrationSchema, valid,
    __slice = [].slice;

  Lazy = require('lazy.js');

  credential = require('credential');

  valid = require('../valid');

  registrationSchema = {
    username: 'email',
    password: 'password'
  };

  parseInput = function(arg, req) {
    return req.body[arg] || req.query[arg];
  };

  ensureInput = function(_arg, res) {
    var field, input;
    input = _arg[0], field = _arg[1];
    if (input != null) {
      return input;
    } else {
      return res.send(400, "Missing " + field);
    }
  };

  fetchForm = function() {
    var args, req, res, _i;
    args = 3 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 2) : (_i = 0, []), req = arguments[_i++], res = arguments[_i++];
    return Lazy(args).map(function(arg) {
      return parseInput(arg, req);
    }).zip(args).collect(function(data) {
      return ensureInput(data, res);
    }).toArray();
  };

  module.exports = function(options) {
    var acceptRegistration;
    return acceptRegistration = function(req, res, next) {
      var nonce, password, username, _ref, _ref1, _ref2, _ref3;
      if (!((((_ref = req.irons) != null ? _ref.getSession : void 0) != null) && typeof req.irons.getSession === typeof Function)) {
        throw new Error('use ironsModel() before acceptRegistration()');
      }
      if (((_ref1 = req.headers) != null ? _ref1.cookie : void 0) == null) {
        return res.send(400, 'Cookies are required to register.');
      }
      if ((_ref2 = req.user) != null ? _ref2.get('id') : void 0) {
        return res.send(403, 'Must be logged out to register.');
      }
      _ref3 = fetchForm('username', 'password', 'nonce', req, res), username = _ref3[0], password = _ref3[1], nonce = _ref3[2];
      if (!(username && password && nonce)) {
        return next;
      }
      return req.irons.fetchSession(function(err, session) {
        var form;
        if (err) {
          return next(err);
        }
        form = session.at('forms.register');
        form.set('username.input', username);
        form.set('password.input', password);
        if (!valid(form, registrationSchema)) {
          return res.send(422, 'Please fix the errors and try again.');
        }
        return req.irons.fetchUserByEmail(username, function(err, user) {
          if (err) {
            return next(err);
          }
          if (user) {
            return req.irons.checkPassword(user, password, function(err, isValid) {
              if (isValid) {
                return req.login(user, function(err) {
                  if (err) {
                    return next(err);
                  }
                  return res.send('Logged in! (Already registered)');
                });
              } else {
                return res.send(401, 'Already registered. Please check your email to continue.');
              }
            });
          } else {
            return req.irons.registerLocal(username, password, function(err, user) {
              if (err) {
                return next(err);
              }
              return req.login(user, function(err) {
                if (err) {
                  return next(err);
                }
                return res.send('Registered!');
              });
            });
          }
        });
      });
    };
  };

}).call(this);
