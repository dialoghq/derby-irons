// Generated by CoffeeScript 1.6.3
(function() {
  var Lazy, check, isEmail, isPassword, sanitize, validate, validator;

  Lazy = require('lazy.js');

  validator = require('validator');

  /*
  Wrap node-validator methods for use with Derby
  */


  check = function(model, callback) {
    var err;
    try {
      callback(validator.check(model.get('input')));
      model.del('errors');
      return true;
    } catch (_error) {
      err = _error;
      model.set('errors', err.message);
      return false;
    }
  };

  sanitize = function(model, callback) {
    var safe;
    safe = callback(validator.sanitize(model.get('input')));
    if (safe != null) {
      return model.set('input', safe);
    }
  };

  /*
  Define data types using validations
  */


  isEmail = function(model) {
    sanitize(model, function(input) {
      return input.trim();
    });
    return check(model, function(input) {
      return input.isEmail();
    });
  };

  isPassword = function(model) {
    return check(model, function(input) {
      return input.len(6);
    });
  };

  /*
  Map data types to schema keys
  */


  validate = function(key, model, schema) {
    switch (schema[key]) {
      case 'email':
        return isEmail(model.at(key));
      case 'password':
        return isPassword(model.at(key));
    }
  };

  /*
  Perform field validation lazily in an attempt
  to avoid overwhelming users with error messages.
  
  returns true if model conforms to schema
  */


  module.exports = function(model, schema, next) {
    return !Lazy(schema).keys().map(function(key) {
      return validate(key, model, schema);
    }).any(function(result) {
      return result === false;
    });
  };

}).call(this);
